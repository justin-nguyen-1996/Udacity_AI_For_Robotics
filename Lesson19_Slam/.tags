!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Cholesky	2d_graph_slam.py	/^    def Cholesky(self, ztol= 1.0e-5):$/;"	m	class:matrix
Cholesky	graph_slam.py	/^    def Cholesky(self, ztol= 1.0e-5):$/;"	m	class:matrix
CholeskyInverse	2d_graph_slam.py	/^    def CholeskyInverse(self):$/;"	m	class:matrix
CholeskyInverse	graph_slam.py	/^    def CholeskyInverse(self):$/;"	m	class:matrix
N	2d_graph_slam.py	/^N                  = 20       # time steps$/;"	v
__add__	2d_graph_slam.py	/^    def __add__(self, other):$/;"	m	class:matrix	file:
__add__	graph_slam.py	/^    def __add__(self, other):$/;"	m	class:matrix	file:
__init__	2d_graph_slam.py	/^    def __init__(self, value = [[]]):$/;"	m	class:matrix
__init__	2d_graph_slam.py	/^    def __init__(self, world_size = 100.0, measurement_range = 30.0,$/;"	m	class:robot
__init__	graph_slam.py	/^    def __init__(self, value = [[]]):$/;"	m	class:matrix
__init__	segmented_cte.py	/^    def __init__(self, grid, init, goal, cost = 1):$/;"	m	class:plan
__init__	segmented_cte.py	/^    def __init__(self, length = 0.5):$/;"	m	class:robot
__init__	segmented_cte.py	/^    def __init__(self, x, y, theta, $/;"	m	class:particles
__mul__	2d_graph_slam.py	/^    def __mul__(self, other):$/;"	m	class:matrix	file:
__mul__	graph_slam.py	/^    def __mul__(self, other):$/;"	m	class:matrix	file:
__repr__	2d_graph_slam.py	/^    def __repr__(self):$/;"	m	class:matrix	file:
__repr__	2d_graph_slam.py	/^    def __repr__(self):$/;"	m	class:robot	file:
__repr__	graph_slam.py	/^    def __repr__(self):$/;"	m	class:matrix	file:
__repr__	segmented_cte.py	/^    def __repr__(self):$/;"	m	class:robot	file:
__sub__	2d_graph_slam.py	/^    def __sub__(self, other):$/;"	m	class:matrix	file:
__sub__	graph_slam.py	/^    def __sub__(self, other):$/;"	m	class:matrix	file:
astar	segmented_cte.py	/^    def astar(self):$/;"	m	class:plan
check_collision	segmented_cte.py	/^    def check_collision(self, grid):$/;"	m	class:robot
check_goal	segmented_cte.py	/^    def check_goal(self, goal, threshold = 1.0):$/;"	m	class:robot
d_gain	segmented_cte.py	/^d_gain            = 6.0$/;"	v
data	2d_graph_slam.py	/^data = make_data(N, num_landmarks, world_size, measurement_range, motion_noise, measurement_noise, distance)$/;"	v
distance	2d_graph_slam.py	/^distance           = 20.0     # distance by which robot (intends to) move each iteratation $/;"	v
distance_noise	segmented_cte.py	/^distance_noise    = 0.03$/;"	v
doit	graph_slam.py	/^def doit(initial_pos, move1, move2, Z0, Z1, Z2):$/;"	f
expand	2d_graph_slam.py	/^    def expand(self, dimx, dimy, list1, list2 = []):$/;"	m	class:matrix
expand	graph_slam.py	/^    def expand(self, dimx, dimy, list1, list2 = []):$/;"	m	class:matrix
get_position	segmented_cte.py	/^    def get_position(self):$/;"	m	class:particles
goal	segmented_cte.py	/^goal = [len(grid)-1, len(grid[0])-1]$/;"	v
grid	segmented_cte.py	/^grid = [[0, 1, 0, 0, 0, 0],$/;"	v
identity	2d_graph_slam.py	/^    def identity(self, dim):$/;"	m	class:matrix
identity	graph_slam.py	/^    def identity(self, dim):$/;"	m	class:matrix
init	segmented_cte.py	/^init = [0, 0]$/;"	v
inverse	2d_graph_slam.py	/^    def inverse(self):$/;"	m	class:matrix
inverse	graph_slam.py	/^    def inverse(self):$/;"	m	class:matrix
main	segmented_cte.py	/^def main(grid, init, goal, steering_noise, distance_noise, measurement_noise, $/;"	f
make_data	2d_graph_slam.py	/^def make_data(N, num_landmarks, world_size, measurement_range, motion_noise, $/;"	f
make_heuristic	segmented_cte.py	/^    def make_heuristic(self, grid, goal, cost):$/;"	m	class:plan
make_landmarks	2d_graph_slam.py	/^    def make_landmarks(self, num_landmarks):$/;"	m	class:robot
matrix	2d_graph_slam.py	/^class matrix:$/;"	c
matrix	graph_slam.py	/^class matrix:$/;"	c
measurement_noise	2d_graph_slam.py	/^measurement_noise  = 2.0      # noise in the measurements$/;"	v
measurement_noise	segmented_cte.py	/^measurement_noise = 0.3$/;"	v
measurement_prob	segmented_cte.py	/^    def measurement_prob(self, measurement):$/;"	m	class:robot
measurement_range	2d_graph_slam.py	/^measurement_range  = 50.0     # range at which we can sense landmarks$/;"	v
motion_noise	2d_graph_slam.py	/^motion_noise       = 2.0      # noise in robot motion$/;"	v
move	2d_graph_slam.py	/^    def move(self, dx, dy):$/;"	m	class:robot
move	segmented_cte.py	/^    def move(self, grid, steer, speed):$/;"	m	class:particles
move	segmented_cte.py	/^    def move(self, grid, steering, distance, $/;"	m	class:robot
np	segmented_cte.py	/^import numpy as np$/;"	i
num_landmarks	2d_graph_slam.py	/^num_landmarks      = 5        # number of landmarks$/;"	v
p_gain	segmented_cte.py	/^p_gain            = 2.0$/;"	v
particles	segmented_cte.py	/^class particles:$/;"	c
plan	segmented_cte.py	/^class plan:$/;"	c
print_result	2d_graph_slam.py	/^def print_result(N, num_landmarks, result):$/;"	f
rand	2d_graph_slam.py	/^    def rand(self):$/;"	m	class:robot
random	2d_graph_slam.py	/^import random$/;"	i
random	graph_slam.py	/^import random$/;"	i
random	segmented_cte.py	/^import random$/;"	i
result	2d_graph_slam.py	/^result = slam(data, N, num_landmarks, motion_noise, measurement_noise) $/;"	v
result	2d_graph_slam.py	/^result = slam(test_data1, 20, 5, 2.0, 2.0)$/;"	v
result	2d_graph_slam.py	/^result = slam(test_data2, 20, 5, 2.0, 2.0)$/;"	v
robot	2d_graph_slam.py	/^class robot:$/;"	c
robot	segmented_cte.py	/^class robot:$/;"	c
run	segmented_cte.py	/^def run(grid, goal, spath, params, printflag = False, speed = 0.1, timeout = 1000):$/;"	f
sense	2d_graph_slam.py	/^    def sense(self):$/;"	m	class:robot
sense	segmented_cte.py	/^    def sense(self):$/;"	m	class:robot
sense	segmented_cte.py	/^    def sense(self, Z):$/;"	m	class:particles
set	segmented_cte.py	/^    def set(self, new_x, new_y, new_orientation):$/;"	m	class:robot
set_noise	segmented_cte.py	/^    def set_noise(self, new_s_noise, new_d_noise, new_m_noise):$/;"	m	class:robot
show	2d_graph_slam.py	/^    def show(self, txt = ''):$/;"	m	class:matrix
show	graph_slam.py	/^    def show(self, txt = ''):$/;"	m	class:matrix
slam	2d_graph_slam.py	/^def slam(data, N, num_landmarks, motion_noise, measurement_noise):$/;"	f
smooth	segmented_cte.py	/^    def smooth(self, weight_data = 0.1, weight_smooth = 0.1, $/;"	m	class:plan
steering_noise	segmented_cte.py	/^steering_noise    = 0.1$/;"	v
take	2d_graph_slam.py	/^    def take(self, list1, list2 = []):$/;"	m	class:matrix
take	graph_slam.py	/^    def take(self, list1, list2 = []):$/;"	m	class:matrix
test_data1	2d_graph_slam.py	/^test_data1 = [[[[1, 19.457599255548065, 23.8387362100849], [2, -13.195807561967236, 11.708840328458608], [3, -30.0954905279171, 15.387879242505843]], [-12.2607279422326, -15.801093326936487]], [[[2, -0.4659930049620491, 28.088559771215664], [4, -17.866382374890936, -16.384904503932]], [-12.2607279422326, -15.801093326936487]], [[[4, -6.202512900833806, -1.823403210274639]], [-12.2607279422326, -15.801093326936487]], [[[4, 7.412136480918645, 15.388585962142429]], [14.008259661173426, 14.274756084260822]], [[[4, -7.526138813444998, -0.4563942429717849]], [14.008259661173426, 14.274756084260822]], [[[2, -6.299793150150058, 29.047830407717623], [4, -21.93551130411791, -13.21956810989039]], [14.008259661173426, 14.274756084260822]], [[[1, 15.796300959032276, 30.65769689694247], [2, -18.64370821983482, 17.380022987031367]], [14.008259661173426, 14.274756084260822]], [[[1, 0.40311325410337906, 14.169429532679855], [2, -35.069349468466235, 2.4945558982439957]], [14.008259661173426, 14.274756084260822]], [[[1, -16.71340983241936, -2.777000269543834]], [-11.006096015782283, 16.699276945166858]], [[[1, -3.611096830835776, -17.954019226763958]], [-19.693482634035977, 3.488085684573048]], [[[1, 18.398273354362416, -22.705102332550947]], [-19.693482634035977, 3.488085684573048]], [[[2, 2.789312482883833, -39.73720193121324]], [12.849049222879723, -15.326510824972983]], [[[1, 21.26897046581808, -10.121029799040915], [2, -11.917698965880655, -23.17711662602097], [3, -31.81167947898398, -16.7985673023331]], [12.849049222879723, -15.326510824972983]], [[[1, 10.48157743234859, 5.692957082575485], [2, -22.31488473554935, -5.389184118551409], [3, -40.81803984305378, -2.4703329790238118]], [12.849049222879723, -15.326510824972983]], [[[0, 10.591050242096598, -39.2051798967113], [1, -3.5675572049297553, 22.849456408289125], [2, -38.39251065320351, 7.288990306029511]], [12.849049222879723, -15.326510824972983]], [[[0, -3.6225556479370766, -25.58006865235512]], [-7.8874682868419965, -18.379005523261092]], [[[0, 1.9784503557879374, -6.5025974151499]], [-7.8874682868419965, -18.379005523261092]], [[[0, 10.050665232782423, 11.026385307998742]], [-17.82919359778298, 9.062000642947142]], [[[0, 26.526838150174818, -0.22563393232425621], [4, -33.70303936886652, 2.880339841013677]], [-17.82919359778298, 9.062000642947142]]]$/;"	v
test_data2	2d_graph_slam.py	/^test_data2 = [[[[0, 26.543274387283322, -6.262538160312672], [3, 9.937396825799755, -9.128540360867689]], [18.92765331253674, -6.460955043986683]], [[[0, 7.706544739722961, -3.758467215445748], [1, 17.03954411948937, 31.705489938553438], [3, -11.61731288777497, -6.64964096716416]], [18.92765331253674, -6.460955043986683]], [[[0, -12.35130507136378, 2.585119104239249], [1, -2.563534536165313, 38.22159657838369], [3, -26.961236804740935, -0.4802312626141525]], [-11.167066095509824, 16.592065417497455]], [[[0, 1.4138633151721272, -13.912454837810632], [1, 8.087721200818589, 20.51845934354381], [3, -17.091723454402302, -16.521500551709707], [4, -7.414211721400232, 38.09191602674439]], [-11.167066095509824, 16.592065417497455]], [[[0, 12.886743222179561, -28.703968411636318], [1, 21.660953298391387, 3.4912891084614914], [3, -6.401401414569506, -32.321583037341625], [4, 5.034079343639034, 23.102207946092893]], [-11.167066095509824, 16.592065417497455]], [[[1, 31.126317672358578, -10.036784369535214], [2, -38.70878528420893, 7.4987265861424595], [4, 17.977218575473767, 6.150889254289742]], [-6.595520680493778, -18.88118393939265]], [[[1, 41.82460922922086, 7.847527392202475], [3, 15.711709540417502, -30.34633659912818]], [-6.595520680493778, -18.88118393939265]], [[[0, 40.18454208294434, -6.710999804403755], [3, 23.019508919299156, -10.12110867290604]], [-6.595520680493778, -18.88118393939265]], [[[3, 27.18579315312821, 8.067219022708391]], [-6.595520680493778, -18.88118393939265]], [[], [11.492663265706092, 16.36822198838621]], [[[3, 24.57154567653098, 13.461499960708197]], [11.492663265706092, 16.36822198838621]], [[[0, 31.61945290413707, 0.4272295085799329], [3, 16.97392299158991, -5.274596836133088]], [11.492663265706092, 16.36822198838621]], [[[0, 22.407381798735177, -18.03500068379259], [1, 29.642444125196995, 17.3794951934614], [3, 4.7969752441371645, -21.07505361639969], [4, 14.726069092569372, 32.75999422300078]], [11.492663265706092, 16.36822198838621]], [[[0, 10.705527984670137, -34.589764174299596], [1, 18.58772336795603, -0.20109708164787765], [3, -4.839806195049413, -39.92208742305105], [4, 4.18824810165454, 14.146847823548889]], [11.492663265706092, 16.36822198838621]], [[[1, 5.878492140223764, -19.955352450942357], [4, -7.059505455306587, -0.9740849280550585]], [19.628527845173146, 3.83678180657467]], [[[1, -11.150789592446378, -22.736641053247872], [4, -28.832815721158255, -3.9462962046291388]], [-19.841703647091965, 2.5113335861604362]], [[[1, 8.64427397916182, -20.286336970889053], [4, -5.036917727942285, -6.311739993868336]], [-5.946642674882207, -19.09548221169787]], [[[0, 7.151866679283043, -39.56103232616369], [1, 16.01535401373368, -3.780995345194027], [4, -3.04801331832137, 13.697362774960865]], [-5.946642674882207, -19.09548221169787]], [[[0, 12.872879480504395, -19.707592098123207], [1, 22.236710716903136, 16.331770792606406], [3, -4.841206109583004, -21.24604435851242], [4, 4.27111163223552, 32.25309748614184]], [-5.946642674882207, -19.09548221169787]]] $/;"	v
transpose	2d_graph_slam.py	/^    def transpose(self):$/;"	m	class:matrix
transpose	graph_slam.py	/^    def transpose(self):$/;"	m	class:matrix
twiddle	segmented_cte.py	/^def twiddle(init_params):$/;"	f
weight_data	segmented_cte.py	/^weight_data       = 0.1$/;"	v
weight_smooth	segmented_cte.py	/^weight_smooth     = 0.2$/;"	v
world_size	2d_graph_slam.py	/^world_size         = 100.0    # size of world$/;"	v
zero	2d_graph_slam.py	/^    def zero(self, dimx, dimy):$/;"	m	class:matrix
zero	graph_slam.py	/^    def zero(self, dimx, dimy = 0):$/;"	m	class:matrix
